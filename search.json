[{"title":"如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲","url":"/2025/03/27/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲/","content":"\n## 1. 打开 Anaconda Powershell Prompt，如图：\n\n![image-20211120195724321](../img/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120195724321.png)\n\n## 2. 输入命令安装 jupyter_contrib_nbextensions\n\n```sh\npip install jupyter_contrib_nbextensions\n```\n\n<img src=\"../img/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120200416547.png\" alt=\"image-20211120200416547\" style=\"zoom:80%;\" />\n\n## 3. 安装 Jupyter 插件\n\n```sh\njupyter contrib nbextension install --user\n```\n\n<img src=\"../img/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120203457906.png\" alt=\"image-20211120203457906\" style=\"zoom:80%;\" />\n\n## 4. 在 Anaconda 中启动 Jupyter，启动之后可以看到 Nbextensions 已安装\n\n## 5. 点击 Nbextensions，取消勾选 disable configuration for nbextensions，并勾选 Table of Contents (2)\n\n![image-20211120201658631](如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120201658631.png)\n\n## 6. 新建或打开一个 Jupyter Notebook 文档，点击“Table of Contents”按钮，就可以查看大纲列表了\n\n<img src=\"../img/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120202535405.png\" alt=\"image-20211120202535405\" style=\"zoom:80%;\" />\n\n## 7. 点击“ToC settings”按钮，可以进行相关设置，如，是否自动编号，是否添加到文档本身等，如图：\n\n<img src=\"../img/如何为 Anaconda 中 Jupyter Notebook 的 Markdown 添加大纲.assets/image-20211120203030599.png\" alt=\"image-20211120203030599\" style=\"zoom:80%;\" />\n","tags":["Anaconda"]},{"title":"Redis","url":"/2025/03/21/Redis/","content":"\n**NoSQL：not only SQL**\n\n- Redis 是远程的，有服务端与客户端，一般我们说的是服务端\n- Redis 是基于内存的，所以比较吃内存\n- Redis 是非关系型的数据库\n- Redis 是基于 C 语言写的\n\n## 1. Redis 的应用场景\n\n- 缓存\n- 队列\n- 数据存储（即具备硬盘持久化机制，Redis有两种持久化机制）\n\n## 2. Redis 服务端安装\n\n```shell\n# 在线安装 gcc 环境，提示是否下载，输入 y\nyum install gcc-c++\n```\n\n```shell\n# 复制文件到 root 目录下，解压 redis\ntar -zxvf redis-2.8.13.tar.gz\n```\n\n```shell\n# 进入解压后的目录\ncd redis-5.0.2\n# 编译\nmake\n```\n\n```shell\n# 安装 redis 到指定目录 /usr/local/redis\nmake PREFIX=/usr/local/redis install\n```\n\n```shell\n# 在 redis-5.0.2 目录下，拷贝配置文件到安装目录\ncp redis.conf /usr/local/redis\n```\n## 3. Redis 服务端的启动与停止\n\n### 3.1 前台启动\n\n```shell\n# 进入 /usr/local/redis/bin 路径启动 redis\n# 前端启动，当前窗口不能做其它事情，按 Ctrl + Shift + C 停止\n./redis-server\n```\n\n### 3.2 后台启动\n\n```shell\n# 修改配置文件，daemonize no 改为 daemonize yes\nvi redis.conf\n```\n\n```shell\n# /usr/local/redis 目录下，后台启动 redis\n./bin/redis-server ./redis.conf\n```\n### 3.3 停止 redis\n\n```shell\n# 停止 redis\n./bin/redis-cli shutdown\n```\n### 3.4 查看 redis 是否启动\n\n```shell\n# 查看 redis 是否启动，默认端口 6379\nps -ef | grep -i redis\n\n# 查看 redis 是否启动\nps aux|grep redis-server\n```\n\n## 4. Redis 客户端的启动与简单操作\n\n```shell\n# 启动 redis 客户端，发送一些命令来使用\n./bin/redis-cli\n\n# 启动 redis 客户端，指定主机与端口号连接 redis 服务端\nredis-cli -h 127.0.0.1 -p 6379\n\n# 输入 ping，回复 PONG，表示连接成功\nping\n```\n\n```shell\n# redis 简单操作\n127.0.0.1:6379> set name \"Hello World\"\n127.0.0.1:6379> get name\n127.0.0.1:6379> keys\n127.0.0.1:6379> del name\n```\n## 5. Jedis 连接 redis 时报错解除的简单设置（生产环境不推荐）\n\n```shell\n# Jedis 连接 redis 时，Linux 服务器需要设置防火墙通过端口，不同版本可能设置不同\nvi /etc/sysconfig/iptables\n# 设置通过端口 6379\n# 重启防火墙\nservice iptables restart\n```\n\n```shell\n# Jedis 操作 redis 时，“vi redis.conf”注释掉以下两项\n# bind 127.0.0.1\n# protected-mode yes\n```\n## 6. CentOS 7 端口设置\n\n```shell\n# 开启一个端口：添加（--permanent永久生效，没有此参数重启后失效）\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent\n```\n```shell\n# 重新载入\nfirewall-cmd --reload\n```\n```shell\n# 查看\nfirewall-cmd --zone=public --query-port=80/tcp\n```\n```shell\n# 删除\nfirewall-cmd --zone=public --remove-port=80/tcp --permanent\n```\n\n```shell\n# 查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n```\n\n## 8. redis 数据类型\n\n### 8.1 字符串（String）\n\n- key 不要超过1024字节\n\n- 统一的命名规范\n\n```shell\n# 设置值\nset key value\n# 先获取 company 的当前值输出，再设置值\ngetset company baidu\n# 删掉值，如果 get 返回(nil)\ndel key\n# 递增加 1，如果 num 无值，初始值为 0\nincr num\n# 递减减 1\ndecr num\n# 递增指定数值\nincrby num 5\n# 递减指定数值\ndecrby num 3\n# 追加字符串\nappend num 5\n```\n\n### 8.2 字符串列表（list）\n\n```shell\nlpush list1 12\nlpush list1 12\nlpush list1 13\nrpop list1\n```\n\n注：list 不要求集合中的元素是唯一的\n\n### 8.3 字符串集合（set）\n\n```\nsadd set1 12\nsadd set1 13\nsadd set1 13\n\n# 查看集合中的元素个数\nscard set1\n\n# 查看 13 是否在集合中\nsismember set1 13\n\n# 从集合中删除 13\nsrem set1 13\n```\n\n注：set 要求集合中的元素是唯一的\n\n### 8.4 哈希（hash）\n\n```shell\n# 插入值\nhset hash1 key1 admin\n# 获取值\nhget hash1 key1\n\n# 设置多个值\nhmset hash2 key1 admin key2 12345\n# 获取多个值\nhmget hash2 key1 key2\n# 获取所有值\nhgetall hash2\n\n# 删除\nhdel hash2 key1 key2\n\n# 返回多个的值\nhmget hash1 key1 key2\n\n# 增加指定数值\nhincrby hash1 key1 3\n\n# 判定指定 key 是否存在，存在返回 1，否则返回 0\nhexists hash1 key1\n\n# 查看 hash 个数\nhlen hash1\n# 查看 key 个数\nhkeys hash1\n# 查看 key 的值\nhvals hash1\n```\n\n- 有序字符串集合（sorted set）\n\n```\nzadd zset1 10.1 val1\n\nzadd zset1 11.2 val2\n\nzadd zset1 9.2 val3\n\n# 查看元素个数\nzcard zset1\n\n# 按照 rank 排名排列，且打印分数\nzrange zset1 0 2 withscores\n\n# 查看 val2 的排名\nzrank zset1 val2\n```\n\n## 9. 其它\n\nLinux：https://redis.io/download\n\nWindows：https://github.com/MicrosoftArchive/redis/releases\n\n在线练习：http://try.redis.io/\n\n教程：http://www.runoob.com/redis/redis-tutorial.html\n\nJedis：https://mvnrepository.com/artifact/redis.clients/jedis\n\nSpring Data Redis：http://spring.io/projects/spring-data-redis\n","tags":["Redis"]},{"title":"MySQL","url":"/2025/03/21/MySQL 查看版本/","content":"\n## 1. 查看MySQL版本\n\n1. `mysql>status;`\n\n2. `mysql> select version();`\n\n3. `[root@localhost ~]# mysql --version`\n\n> 参考链接：\n>\n> https://www.cnblogs.com/sz-xioabai/p/6547322.html\n\n## 2. 查看MySQL的当前存储引擎\n\n一般情况下，MySQL会默认提供多种存储引擎，可以通过下面命令来查看：\n\n- 查看MySQL提供什么存储引擎：\n  `mysql> show engines;`\n\n- 查看MySQL当前默认存储引擎：\n  `mysql> show variables like '%storage_engine%';`\n\n- 查看MySQL某个表用了什么存储引擎（在显示结果里参数engine后面的就表示该表当前用的存储引擎）\n  `mysql> show create table 表名;`\n\n> 参考链接：\n>\n> https://www.cnblogs.com/zhming26/p/6322353.html\n\n## 3. 设定大小写敏感\n\n> 参考链接：\n> https://www.cnblogs.com/morewindows0/p/9247674.html\n> https://blog.csdn.net/xsimplify/article/details/78759832","tags":["MySQL"]},{"title":"Hello World","url":"/2025/03/17/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["hexo"]}]